// GUI for Movable_LFP_ReCONV_electrode

if (section_exists("dummy")){

	access dummy
	delete_section() 
}


forall {
	insert extracellular    
	insert mea
}

objref mul_elec_x,mul_elec_y,mul_elec_z

mul_elec_x = new Vector()
mul_elec_x = new Vector()
mul_elec_x = new Vector()


Num_of_colum = 4
Num_of_row = 4


objref mul_x,mul_y,mul_z
mul_x = new Vector()
mul_y = new Vector()
mul_z = new Vector()


for (i = mul_start_point_x; i<(Num_of_colum * mul_elec_distance) + mul_start_point_x; i = i + mul_elec_distance){
	for (j = mul_start_point_y;j< (Num_of_row * mul_elec_distance) + mul_start_point_y;j = j + mul_elec_distance){

			//print i,j
			//change the dimention of mea according to network dimension
			/*multi_setelec(i,j,elec_z) // for marking electrode position
			mul_x.append(i)
			mul_y.append(j)
			mul_z.append(mul_start_point_z)*/

			multi_setelec(i,elec_z,j) // for marking electrode position
			mul_x.append(i)
			mul_y.append(mul_start_point_z)
			mul_z.append(j)

	}

}


func template_mea(){

			/*
		long_dist_x,1
		long_dist_y,2
		long_dist_z,3
		sum_dist_comp,4
		dist_comp,5
		dist_comp_x,6
		dist_comp_y,7
		dist_comp_z,8
		*/

		sum_HH = ($1 * $6) + ($2 * $7) + ($3 * $8)
				
		final_sum_HH = sum_HH / $4

		sum_temp1 = ($1*$1) + ($2*$2) + ($3*$3)
		r_sq = sum_temp1 -(final_sum_HH * final_sum_HH)
			
		Length_vector = final_sum_HH + $4
							


		if ((final_sum_HH<0)&&(Length_vector<=0)){


			phi=log((sqrt((final_sum_HH*final_sum_HH) + r_sq) - final_sum_HH)/(sqrt((Length_vector*Length_vector)+r_sq)-Length_vector))


		}else if((final_sum_HH>0)&&(Length_vector>0)){

			
			phi=log((sqrt((Length_vector*Length_vector)+r_sq) + Length_vector)/(sqrt((final_sum_HH*final_sum_HH)+r_sq) + final_sum_HH))
			
		}else{

			phi=log(((sqrt((Length_vector*Length_vector)+r_sq)+Length_vector) * (sqrt((final_sum_HH*final_sum_HH)+r_sq)-final_sum_HH))/r_sq)
						
		}


		first_part_l = (1*sigma)/(4*PI*$4) * phi
		return first_part_l

}


objref first_part_line
first_part_line = new Vector()
sigma = 0.354


proc set_electrode(){

forall {    

	    if (ismembrane("mea")) {	
		x = (x3d(0) + x3d(1)) / 2 
		y = (y3d(0) + y3d(1)) / 2 
		z = (z3d(0) + z3d(1)) / 2 

		//calculate length of the compartment
	
		
		dist_comp = sqrt( ((x3d(1) - x3d(0))*(x3d(1) - x3d(0))) + ((y3d(1) - y3d(0))*(y3d(1) - y3d(0))) + ((z3d(1) - z3d(0))*(z3d(1) - z3d(0))))
		dist_comp_x = (x3d(1) - x3d(0)) //* 1e-6
		dist_comp_y = (y3d(1) - y3d(0)) //* 1e-6
		dist_comp_z = (z3d(1) - z3d(0)) //* 1e-6

		sum_dist_comp = sqrt((dist_comp_x*dist_comp_x) + (dist_comp_y*dist_comp_y) + (dist_comp_z*dist_comp_z))

		for ee=0,15{
				
			long_dist_x = (mul_x.x[ee] - x3d(1))
			long_dist_y = (mul_y.x[ee] - y3d(1))
			long_dist_z = (mul_z.x[ee] - z3d(1))
			val = template_mea(long_dist_x,long_dist_y,long_dist_z,sum_dist_comp,dist_comp,dist_comp_x,dist_comp_y,dist_comp_z)
			first_part_line.append(val)

		}	
	

		for (x, 0) {
		
			//setpointer vvext_lfp(x), vext[0](x)
			setpointer im_mea(x), i_membrane(x)

			setpointer first_part_line0_mea(x), first_part_line.x[0] 
			setpointer first_part_line1_mea(x), first_part_line.x[1] 
			setpointer first_part_line2_mea(x), first_part_line.x[2] 
			setpointer first_part_line3_mea(x), first_part_line.x[3] 
			setpointer first_part_line4_mea(x), first_part_line.x[4] 
			setpointer first_part_line5_mea(x), first_part_line.x[5] 
			setpointer first_part_line6_mea(x), first_part_line.x[6] 
			setpointer first_part_line7_mea(x), first_part_line.x[7] 
			setpointer first_part_line8_mea(x), first_part_line.x[8] 
			setpointer first_part_line9_mea(x), first_part_line.x[9] 
			setpointer first_part_line10_mea(x), first_part_line.x[10] 
			setpointer first_part_line11_mea(x), first_part_line.x[11] 
			setpointer first_part_line12_mea(x), first_part_line.x[12] 
			setpointer first_part_line13_mea(x), first_part_line.x[13] 
			setpointer first_part_line14_mea(x), first_part_line.x[14] 
			setpointer first_part_line15_mea(x), first_part_line.x[15]
	
						
				
		}



	    }
	}


}


set_electrode()


xopen("mea_field_sum.hoc")


proc init() {
        finitialize(v_init)
        fcurrent()
	mea_line0 = mea_fieldrec_line0()
	mea_line1 = mea_fieldrec_line1()
	mea_line2 = mea_fieldrec_line2()
	mea_line3 = mea_fieldrec_line3()
	mea_line4 = mea_fieldrec_line4()
	mea_line5 = mea_fieldrec_line5()
	mea_line6 = mea_fieldrec_line6()
	mea_line7 = mea_fieldrec_line7()
	mea_line8 = mea_fieldrec_line8()
	mea_line9 = mea_fieldrec_line9()
	mea_line10 = mea_fieldrec_line10()
	mea_line11 = mea_fieldrec_line11()
	mea_line12 = mea_fieldrec_line12()
	mea_line13 = mea_fieldrec_line13()
	mea_line14 = mea_fieldrec_line14()
	mea_line15 = mea_fieldrec_line15()
}

proc advance() {
        fadvance()
	mea_line0 = mea_fieldrec_line0()
	mea_line1 = mea_fieldrec_line1()
	mea_line2 = mea_fieldrec_line2()
	mea_line3 = mea_fieldrec_line3()
	mea_line4 = mea_fieldrec_line4()
	mea_line5 = mea_fieldrec_line5()
	mea_line6 = mea_fieldrec_line6()
	mea_line7 = mea_fieldrec_line7()
	mea_line8 = mea_fieldrec_line8()
	mea_line9 = mea_fieldrec_line9()
	mea_line10 = mea_fieldrec_line10()
	mea_line11 = mea_fieldrec_line11()
	mea_line12 = mea_fieldrec_line12()
	mea_line13 = mea_fieldrec_line13()
	mea_line14 = mea_fieldrec_line14()
	mea_line15 = mea_fieldrec_line15()
}


objref mea_rec[16]
proc run_multi(){

	set_electrode()
		
	for pp=0,15{
		mea_rec[pp] = new Vector()
	}
	mea_rec[0].record(&mea_line0)
	mea_rec[1].record(&mea_line1)
	mea_rec[2].record(&mea_line2)
	mea_rec[3].record(&mea_line3)
	mea_rec[4].record(&mea_line4)
	mea_rec[5].record(&mea_line5)
	mea_rec[6].record(&mea_line6)
	mea_rec[7].record(&mea_line7)
	mea_rec[8].record(&mea_line8)
	mea_rec[9].record(&mea_line9)
	mea_rec[10].record(&mea_line10)
	mea_rec[11].record(&mea_line11)
	mea_rec[12].record(&mea_line12)
	mea_rec[13].record(&mea_line13)
	mea_rec[14].record(&mea_line14)
	mea_rec[15].record(&mea_line15)

	run()
}



